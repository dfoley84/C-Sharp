PARAM ()
BEGIN{
function Get-RandomPassword {
	param(
		$length = 10, 
		$characters = 
 'abcdefghkmnprstuvwxyzABCDEFGHKLMNPRSTUVWXYZ123456789!"§$%&/()=?*+#_'
	)
	# select random characters
	$random = 1..$length | ForEach-Object { Get-Random -Maximum $characters.length }
	# output random pwd
	$private:ofs=""
	[String]$characters[$random]
}

function Randomize-Text {
	param(
		$text
	)
	$anzahl = $text.length
	$indizes = Get-Random -InputObject (0..$anzahl) -Count $anzahl
	
	$private:ofs=''
	[String]$text[$indizes]
}
function Get-ComplexPassword {
    $password  = Get-RandomPassword -length  -characters 'ABCDEFGHKLMNPRSTUVWXYZ'
    $password  += Get-RandomPassword -length  -characters 'abcdefghiklmnprstuvwxyz'
	$password += Get-RandomPassword -length  -characters '}$?!=_/+-*{'
	$password += Get-RandomPassword -length  -characters '1234567890'
	Randomize-Text $password
}
<#------------------------------------------------------------------------------------------------------------
    End of the Generate Password Functions
------------------------------------------------------------------------------------------------------------#>

#Global Variables

$smtpServer=" " #SMTP SERVER
$from=" " #Email From
$logging="Disabled" # If Set to Enable Logging will be On Set to Disabled to Disable Logging
$logFile = "E:\sftp" #Path to Log File. ie. G:\mylog.csv
$testing="Enabled"#Disabled to Email Users
$testRecipient=" "#Testing Email
$support=" " #Email VGTSI Support 
$date = Get-Date -format MMddyyyy # Get Date 
$MaxPasswordAge = 42 # Max Password Age for SFTP Users



# Check Logging Settings
if (($logging) -eq "Enabled")
{
    # Test Log File Path
    $logfilePath = (Test-Path $logFile)
    if (($logFilePath) -ne "True")
    {
        # Create CSV File and Headers
        New-Item $logfile -ItemType File
        Add-Content $logfile "Date,Name,User Id,EmailAddress,DaystoExpire,Last Logged On"
    }#end if 
} # End Logging Check

    # modify these to point to your db server and database
    $SqlServer = " " #DB Server
    $SqlDBName = " " #Database being Connected to
    # use these for a sql login.  Or you can modify the connection string to use integrated authentication and set the scheduled task to run under that user context (omit User ID and Password from the connect string).
    $SqlLoginUser = "" #Username
    $SqlLoginPassword = " " #Password 

    #Database Connection and Query
    $SqlConnection = New-Object System.Data.SqlClient.SqlConnection
    $SqlConnection.ConnectionString = "Server=$SqlServer;Database=$SqlDBName;Integrated Security=SSPI;Persist Security Info=False;User ID=$SqlLoginUser;Password=$SqlLoginPassword"
    # $SqlConnection.ConnectionString = "Server=$SqlServer;Database=$SqlDBName;Integrated Security=SSPI;Persist Security Info=False;User ID=$SqlLoginUser;Password=$SqlLoginPassword"
    $SqlQuery ="SELECT * FROM dbo.Host_Users WHERE CONVERT(INT,GETDATE()) - CONVERT(INT,Pass_Reset_Date) >=39
                AND CONVERT(INT,GETDATE()) - CONVERT(INT,Pass_Reset_Date) <=42 
               AND Pass_Expire_Days = 42;"


    $SqlCmd = New-Object System.Data.SqlClient.SqlCommand
    $SqlCmd.CommandText = $SqlQuery 
    $SqlCmd.Connection = $SqlConnection
    $SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
    $SqlAdapter.SelectCommand = $SqlCmd
    $DataSet = New-Object System.Data.DataSet
    [void] $SqlAdapter.Fill($DataSet)
    $SqlConnection.Close() #Close Connection to DB
    $IFTPADDU = 'C:\Program Files (x86)\Ipswitch\WS_FTP Server\iftpaddu.exe'
}
PROCESS
{
    Foreach($data in $DataSet)
    {
    $DataSet.Tables[0]|ForEach-Object
{
    Write-Output $_ #Write output
    #Getting Users Details From Out-Put
    $name = $_.User_FullName # Get User Full Name
    $userspassword = $_.User_Password #Getting Current Password.
    $userName = $_.User_LoginID # Get User Login Name
    $oldpassword = $_.User_Password #Getting User Password
    $emailaddress = $_.User_Email_Addr #Get Users Email Address
    $Last_Logon_Date = $_.last_logon_date #Get Users Last Logged on Date
    $days= ($_.Pass_Reset_Date - [datetime]::Today).Days + $_.Pass_Expire_Days # Getting Days Left.
    $daysleft = $days #vaildate
    $daysleft = "$days" #Add to Output

       $messageDays ="$daysleft" + " days" #getting Days 
       $newpassword = Get-ComplexPassword #Generate new Password

<#------------------------------------------------------------------------------------------------------------
   SEND EMAIL to Customer
------------------------------------------------------------------------------------------------------------#>

    $subject="SFTP Password due to expire"   # Email Subject
    # Email Body Set Here.
    $body ="<html>
    <body>
    Dear $name,
    <p>Your SFTP password was due to expire in <b><font color=red>$messageDays</b></font><br>
    <p>Your SFTP Username is :  $userName.<br>
    <p>Temporary  Account password for your Main User Account is : <b><font color=red>$newpassword</b></font><br>
    <p>Any Issues with password Please Reply to this Email<br>
    <p>Thanks,<br>
     Support<br> 
    </P>
    </body>
    </html>"  #End Email Body
     # If Testing Is Enabled - Email Administrator
    if (($testing) -eq "Enabled")
    {
        $emailaddress = $testRecipient
    } # End Testing
    # If Logging is Enabled Log Details
        if (($logging) -eq "Enabled")
        {
            Add-Content $logfile "$date,$name,$userName,$emailaddress,$days,$Last_Logon_Date" 
        }#end if 
      # Send Email Message
       Send-Mailmessage -smtpServer $smtpServer -from $from -to $emailaddress -Cc $support -subject $subject -body $body -bodyasHTML -priority High  
	<#------------------------------------------------------------------------------------------------------------
 		  END OF SEND EMAIL to Customer	
	------------------------------------------------------------------------------------------------------------#>
<#---------------------------------------------------------------------------------------------------------------------
		The the Process.. Call the iftpaddu Module, Set new Password 
		Force Password Change at next login using the Ipswitch command +forcechgpass

	------------------------------------------------------------------------------------------------------------#>

       Start-Process $IFTPADDU "-mod -u $userName -h <HOSTNAME> -p $newpassword +forcechgpass" # Call the IFTPADDU IPSWITCH Module 
 }
   }#END
    }#End Process
END{} 


